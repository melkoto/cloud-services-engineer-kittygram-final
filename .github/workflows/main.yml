name: CI/CD Kittygram

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend
  backend_tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.9
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint backend
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 .

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h postgres -p 5432 && break
            echo "Waiting for postgres..."
            sleep 1
          done

      - name: Run backend tests
        working-directory: ./backend
        env:
          DB_HOST: postgres
          DB_PORT: 5432
          DB_ENGINE: ${{ secrets.DB_ENGINE }}
          DB_NAME: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: python manage.py test

  # –ü—É—à Backend Docker –æ–±—Ä–∞–∑–∞
  build_backend_and_push_to_docker_hub:
    name: Push Backend Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest
          # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
          no-cache: false

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd frontend/
          npm ci

      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  # –ü—É—à Frontend Docker –æ–±—Ä–∞–∑–∞
  build_frontend_and_push_to_docker_hub:
    name: Push Frontend Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest
          # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
          no-cache: true

  # –ü—É—à Gateway Docker –æ–±—Ä–∞–∑–∞
  build_gateway_and_push_to_docker_hub:
    name: Push Gateway Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest
          # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
          no-cache: true

  # –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "kittygram"

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            mkdir -p ~/kittygram
            # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
            cat <<EOF > ~/kittygram/.env
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=${{ secrets.DEBUG }}
            DB_ENGINE=${{ secrets.DB_ENGINE }}
            DB_NAME=${{ secrets.DB_NAME }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            EOF
            cd ~/kittygram
            sudo docker compose -f docker-compose.yml down
            sudo docker compose -f docker-compose.yml pull
            sudo docker compose -f docker-compose.yml up -d
            sudo docker compose -f docker-compose.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.yml exec backend python manage.py collectstatic --noinput
            sudo docker system prune -af

  # –û—Ç–ø—Ä–∞–≤–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
  send_message:
    name: Send Telegram Notification
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Extract commit message
        id: extract_commit_message
        run: echo "COMMIT_MESSAGE=${{ github.event.head_commit.message }}" >> $GITHUB_ENV

      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ‚úÖ Deployment —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! 
            üåê Kittygram –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${{ secrets.KITTYGRAM_DOMAIN }}
            üë§ –ê–≤—Ç–æ—Ä –∫–æ–º–º–∏—Ç–∞: ${{ github.actor }}
            üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: ${{ env.COMMIT_MESSAGE }}
            üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
