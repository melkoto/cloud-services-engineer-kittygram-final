name: CI/CD Kittygram

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt

      - name: Lint backend
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 .

      - name: Run backend tests
        working-directory: ./backend
        run: |
          python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest
          push: true

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest
          push: true

      - name: Build and push gateway
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest
          push: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: List files before SCP
        run: ls -la

      - name: Ensure directory exists on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p ~/kittygram

      - name: Copy docker-compose.yml via SCP
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: docker-compose.yml
          target: "~/kittygram"
          port: 22
          timeout: 30s
          command_timeout: 10m
          proxy_port: 22
          proxy_timeout: 30s

      - name: Create .env on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cat <<EOF > ~/kittygram/.env
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=${{ secrets.DEBUG }}
            DB_ENGINE=${{ secrets.DB_ENGINE }}
            DB_NAME=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            EOF

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd ~/kittygram

            # Остановка и запуск контейнеров
            docker compose -f docker-compose.production.yml down || { echo "Не удалось остановить контейнеры"; exit 1; }
            docker compose -f docker-compose.production.yml pull || { echo "Не удалось обновить образы"; exit 1; }
            docker compose -f docker-compose.production.yml up -d || { echo "Не удалось запустить контейнеры"; exit 1; }

            # Ожидание готовности базы данных
            echo "Ожидание готовности PostgreSQL..."
            while ! docker compose -f docker-compose.production.yml exec postgres pg_isready -U $POSTGRES_USER; do
              sleep 1
            done
            echo "PostgreSQL готов."

            # Выполнение миграций
            echo "Выполнение миграций..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate || { echo "Не удалось выполнить миграции"; exit 1; }

            # Сборка статических файлов
            echo "Сборка статических файлов..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput || { echo "Не удалось собрать статические файлы"; exit 1; }

            # Копирование статических файлов в директорию
            echo "Копирование статических файлов..."
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/ || { echo "Не удалось скопировать статические файлы"; exit 1; }

      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "✅ Deployment successful! Kittygram is live at ${{ secrets.KITTYGRAM_DOMAIN }}"
